@model Course

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grade Tracker</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
@{
int finalMark = 0;
int finalMarkTo12 = 0;
}
<body>
<div class="container mt-5">
    <h1 class="text-center mb-4">@Model.Name</h1>
    @if (Model.Assignments != null && Model.Assignments.Count != 0)
    {
    <h2>Assignments</h2>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Assignment</th>
            <th>Mark</th>
            <th>Weight Achieved</th>
            <th>Weighting</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var assignment in Model.Assignments)
        {
        <tr>
            <td>@assignment.Name</td>
            <td><input type="number" class="form-control" id="assignmentMark_@assignment.Name" value="@assignment.Mark" oninput="updateAssignmentWeight('@assignment.Name', @assignment.Weight)" /></td>
            <td id="assignmentWeightAchieved_@assignment.Name">@((assignment.Mark / 100.0) * assignment.Weight)</td>
            <td>@assignment.Weight</td>
        </tr>
        }
        </tbody>
    </table>
    }

    @if (Model.Midterms != null && Model.Midterms.Count != 0)
    {
    <h2>Midterms</h2>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Midterm</th>
            <th>Mark</th>
            <th>Weight Achieved</th>
            <th>Weighting</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var midterm in Model.Midterms)
        {
        <tr>
            <td>@midterm.Name</td>
            <td><input type="number" class="form-control" id="midtermMark_@midterm.Name" value="@midterm.Mark" oninput="updateMidtermWeight('@midterm.Name', @midterm.Weight)" /></td>
            <td id="midtermWeightAchieved_@midterm.Name">@((midterm.Mark / 100.0) * midterm.Weight)</td>
            <td>@midterm.Weight</td>
        </tr>
        }
        </tbody>
    </table>
    }

    @if (Model.Final != null)
    {
    <h2>Exam</h2>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Exam</th>
            <th>Mark</th>
            <th>Weight Achieved</th>
            <th>Weighting</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@Model.Final.Name</td>
            <td>
                <input type="number" class="form-control" id="finalMark" value="@Model.Final.Mark" oninput="updateFinalWeight()" />
            </td>
            <td id="finalWeightAchieved">
                @(Model.Final.Mark / 100.0 * Model.Final.Weight)
            </td>
            <td>@Model.Final.Weight</td>
        </tr>
        </tbody>
    </table>
    }

    <h2>Final Marks</h2>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Final Mark</th>
            <th>Final Exam Mark to 12</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td id="finalMarkSum">0</td>
            <td id="finalExamMarkTo12">0</td>
        </tr>
        </tbody>
    </table>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<button class="btn btn-primary" onclick="saveAllGrades()">Save</button>
</body>
</html>

<script>
    function calculateTotalWeightAchieved() {
        let totalWeightAchieved = 0;

        // Sum assignment weights
        document.querySelectorAll('[id^="assignmentWeightAchieved_"]').forEach(element => {
            totalWeightAchieved += parseFloat(element.innerText) || 0;
        });

        // Sum midterm weights
        document.querySelectorAll('[id^="midtermWeightAchieved_"]').forEach(element => {
            totalWeightAchieved += parseFloat(element.innerText) || 0;
        });

        // Add final exam weight
        totalWeightAchieved += parseFloat(document.getElementById('finalWeightAchieved').innerText) || 0;

        // Update the final mark sum
        document.getElementById('finalMarkSum').innerText = totalWeightAchieved.toFixed(2);

        // Calculate and update the final exam mark needed to 12
        calculateFinalExamMarkTo12(totalWeightAchieved);
    }

    function calculateFinalExamMarkTo12(totalWeightAchieved) {
        var finalExamWeight = @Model.Final.Weight;
        var finalExamMarkTo12 = (90 - totalWeightAchieved) / finalExamWeight;
        document.getElementById('finalExamMarkTo12').innerText = 100*(finalExamMarkTo12.toFixed(2));
    }

    function updateFinalWeight() {
        var mark = parseFloat(document.getElementById('finalMark').value) || 0;
        var weight = @Model.Final.Weight;
        var weightAchieved = (mark / 100.0) * weight;
        document.getElementById('finalWeightAchieved').innerText = weightAchieved.toFixed(2);
        calculateTotalWeightAchieved();
    }

    function updateMidtermWeight(midtermName, weight) {
        var mark = parseFloat(document.getElementById('midtermMark_' + midtermName).value) || 0;
        var weightAchieved = (mark / 100.0) * weight;
        document.getElementById('midtermWeightAchieved_' + midtermName).innerText = weightAchieved.toFixed(2);
        calculateTotalWeightAchieved();
    }

    function updateAssignmentWeight(assignmentName, weight) {
        var mark = parseFloat(document.getElementById('assignmentMark_' + assignmentName).value) || 0;
        var weightAchieved = (mark / 100.0) * weight;
        document.getElementById('assignmentWeightAchieved_' + assignmentName).innerText = weightAchieved.toFixed(2);
        calculateTotalWeightAchieved();
    }
</script>

<script>
    function saveAllGrades() {
        const courseName = '@Model.Name';
        const grades = [];

        // Collect assignment grades
        document.querySelectorAll('[id^="assignmentMark_"]').forEach(element => {
            const gradeName = element.id.replace('assignmentMark_', '');
            const gradeValue = parseFloat(element.value) || 0;
            grades.push({ gradeName, gradeValue });
        });

        // Collect midterm grades
        document.querySelectorAll('[id^="midtermMark_"]').forEach(element => {
            const gradeName = element.id.replace('midtermMark_', '');
            const gradeValue = parseFloat(element.value) || 0;
            grades.push({ gradeName, gradeValue });
        });

        // Collect final exam grade
        const finalMarkElement = document.getElementById('finalMark');
        if (finalMarkElement) {
            const gradeName = 'Final Exam';
            const gradeValue = parseFloat(finalMarkElement.value) || 0;
            grades.push({ gradeName, gradeValue });
        }

        // Send POST request via fetch
        const promises = grades.map(grade => {
            return fetch('/Builder/SaveGrade', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    courseName: courseName,
                    gradeName: grade.gradeName,
                    gradeValue: grade.gradeValue
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        throw new Error(`Failed to save grade: ${grade.gradeName}`);
                    }
                });
        });

        Promise.all(promises)
            .then(() => {
                const buildUrl = '@Url.Action("Build", "Builder")' + `?courseName=${courseName}`;
                window.location.href = buildUrl;
            })
            .catch(error => {
                alert('Error saving grades: ' + error.message);
            });
    }
</script>